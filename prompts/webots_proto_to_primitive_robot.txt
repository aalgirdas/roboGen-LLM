You are an expert in robot simulation and modeling for Webots, MuJoCo, and PyBullet.
I will provide you with the contents of a Webots proto file (as .txt file) that defines a robot.
Your task is to analyze the file, extract its physics and geometry information, and produce a simplified version of the robot made only from basic geometric primitives (box, cylinder, sphere).

The goal is to create a model that can be easily reimplemented in other simulators while retaining approximate physical behavior and structure.

Step-by-Step Instructions

Parse the PROTO file
  Identify all Solid, Joint, and Shape nodes.
  Extract physical parameters such as mass, density, friction, and inertia.
  Capture dimensions from geometry nodes like Box, Cylinder, Sphere, or mesh approximations (IndexedFaceSet).

Simplify the Geometry
  Approximate any complex mesh or shape with one or more primitive geometries (box, cylinder, sphere).
  Estimate approximate size and position (bounding box or best-fit parameters).

Extract Physics
  Record key physics parameters: mass, density, center of mass, inertia tensor, joint limits, stiffness, damping, etc.

Generate Assembly Instructions
  Describe how to construct the simplified robot from primitives:
    parent-child hierarchy,
    positions and orientations of each part,
    joint connections and limits.

Output Everything in JSON Format

{
  "robot_name": "string",
  "approximate_scale": [float, float, float],
  "physics": {
    "mass": float,
    "center_of_mass": [float, float, float],
    "inertia": [float, float, float, float, float, float],
    "friction": float,
    "restitution": float,
    "damping": float
  },
  "parts": [
    {
      "name": "string",
      "type": "box | cylinder | sphere",
      "dimensions": {
        "size": [float, float, float],  // for box
        "radius": float,                // for sphere or cylinder
        "height": float                 // for cylinder
      },
      "mass": float,
      "position": [float, float, float],
      "orientation": [float, float, float],  // Euler or quaternion
      "material": "string | null",
      "parent": "string | null",
      "joint": {
        "type": "hinge | slider | fixed",
        "axis": [float, float, float],
        "limits": [float, float],
        "stiffness": float,
        "damping": float
      }
    }
  ],
  "assembly_instructions": [
    "Step-by-step textual description of how to assemble the robot using the listed parts."
  ]
}



